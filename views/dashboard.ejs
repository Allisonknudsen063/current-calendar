<!-- views/dashboard.ejs -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>User Dashboard</title>
    <!-- Include FullCalendar library -->
    <link href='https://cdnjs.cloudflare.com/ajax/libs/fullcalendar/6.11.1/main.min.css' rel='stylesheet' />

    <style>
        body {
            background-color: rgba(57, 96, 140, 0.579);
            color: white;
            font-family: monospace;
        }
        h2 {
            font-size: 24px;
            font-family: monospace;
        }
        #trackButton {
            padding: 100px 120px; /* Add padding */
            margin-top: 20px; /* Add margin to separate from other elements */
            background-color: #7d8691; /* Green background color */
            color: white; /* White text color */
            border: none; /* Remove default button border */
            border-radius: 5px; /* Add border radius for rounded corners */
            cursor: pointer; /* Change cursor to pointer on hover */
            transition: background-color 0.3s; /* Smooth transition for background color change */
            font-size: 60px;
            font-family: monospace;
        }

        #trackButton:hover {
            background-color: #02724d; /* Darker green on hover */
        }
    </style>
</head>
<body>
    <h2>Welcome, <span style="font-size: 72px;"><%= username %></span></h2>
    <div id="calendar"></div>
    
    <!-- Include FullCalendar library script -->
    <script src='https://cdn.jsdelivr.net/npm/fullcalendar@6.1.11/index.global.min.js'></script>
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            var calendarEl = document.getElementById('calendar');
            var calendar = new FullCalendar.Calendar(calendarEl, {
                // FullCalendar configuration options
                initialView: 'dayGridMonth', // Set the initial view to month
                events: '/api/events', // Fetch events specific to the logged-in user from backend API
                eventDidMount: function(info) {
                    // Add custom styling for tracked days
                    if (info.event.extendedProps.isTracked) {
                        info.el.style.backgroundColor = 'red';
                    }
                }
            });

            // Fetch tracked days from the server and render them as events
            fetch('/track')
                .then(response => response.json())
                .then(trackedDays => {
                    // Map tracked days to FullCalendar events format
                    const trackedEvents = trackedDays.map(day => ({
                        title: 'Tracked Period',
                        start: day.startDate,
                        end: day.endDate,
                        allDay: true
                    }));
                    // Add tracked events to the calendar
                    calendar.addEventSource(trackedEvents);
                })
                .catch(error => console.error('Error fetching tracked days:', error));
            calendar.render(); // Render the calendar

            let startDate = null; // Variable to store the start date

            // Add event listener to the tracking button
            document.getElementById('trackButton').addEventListener('click', async function() {
                if (startDate === null) {
                    // Set the start date if it's not already set
                    startDate = calendar.getDate(); // Get the current date from the calendar
                    console.log('Start date set:', startDate);
                } else {
                    // Set the end date if the start date is already set
                    const endDate = calendar.getDate(); // Get the current date from the calendar
                    console.log('End date set:', endDate);

                    // Send a POST request to the server-side route for tracking menstruation
                    try {
                        const response = await fetch('/track', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({
                                startDate: startDate.toISOString(),
                                endDate: endDate.toISOString()
                            })
                        });

                        // Handle the response...
                    } catch (error) {
                        console.error('Error tracking menstruation:', error);
                    }

                    // Reset the start date for the next tracking session
                    startDate = null;
                }
            });
        });
    </script>
    <!-- Button for tracking menstruation -->
    <button id="trackButton">Track Menstruation</button>
</body>
</html>
